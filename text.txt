1. message쪽 갈기 [중요도: (상), 난이도: (중)]
  - message 형태 바꾸기
    1. 명칭
    2. 분리
      된 것들: 
      - API 정의 된 것들 -> data형을 만들기
      - event assertion 테스트
      - parsing을 손보고

      다음 할 것:
        event flow 그리기

      안 된 것들:
      - 외부 message -> connection 쪽으로 역할이 넘어가야함
      - data.legacy 기존 Legacy Payload 처리

      receiver -> payload -> 내부 발행 X | 외부 발행 O
      connection (handler | receiver) -> event 발행 -> , event 대응 (new-conn 만들어내는 것 같은거) (나중) -> receiver 내부 바뀜

      -> event로 바꾸기, 그리고 handler 중점 이벤트 발행으로 바꾸기

      - receiver 파라미터를 Message -> Event로 바꾸기
      - connection multicast, broadcast Event로 바꾸기

  - 외부 event, 내부 event 분리
  - (가능하다면) API 명세에 맞게 
  - 파싱 쪽 개선

기존 legacy코드를 유지 + 새체계가 적용될수 있게 | 난이도 상 + 양 하
새채계로 갈기 | 난이도 하 + 양 상상

우리 지금 프로젝트 서비스 중이 아니라서 한번에 갈아도 됨.
방법 -> 일단 분리는 하는데 지금 있는 message 형태를 copy한 내부 메시지를 만들어. 그걸 사용해.
-> connection handler쪽에서 그거 발행하게. Input으로 받는 타입만 바꾸면 그렇게 많이 바뀌지 않을듯.

-> 배포 

2. board 갈기 [중요도: (중), 난이도: (상)]
  - board handler 리팩터링 -> 내부적으로 storage 사용하도록
  - Section, Tiles 같은 데이터형 리팩터링

3. Cursor [중요도: (하), 난이도:(하)]

4. Connection [중요도: (상), 난이도:(상)]

5. 동시성 [중요도: (상), 난이도: (최상)]

6. open-tile 딜레이 기능(타일 여는 데 시간 걸리는 거) [중요도: (하), 난이도: (중)]
7. 타일 해체 기능 [중요도: (하), 난이도: (중)]
8. 인프라 구성 -> 단일 ec2에 docker 띄우는거 맞음?, ngrok 벗어나기 [중요도 (상), 난이도: (중상)]

9. move, watching 최적화 [중요도: (하), 난이도: (하)]
10. database interface(sqlite, redis) 구현[중요도: (하), 난이도: (중하)]
11. 통합 test 만들기 [중요도: (중), 난이도: (중)]

===============================================================================

TODO: Score 일괄처리
TODO: Cursor event buffer
